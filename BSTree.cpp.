#include"BSTree.h"

void test()
{
	BSTree<int, int>B1;
	int a[] = { 8, 2, 4, 1, 6, 7, 5, 3, 0, 9 };
	for (int i = 0; i < sizeof(a) / sizeof(a[0]); i++)
	{
		B1.Insert(a[i], i);
	}
	B1.InOrder();
	BSTreeNode<int, int>*ret = B1.Find(7);
	cout << ret->_key << ":" << ret->_value<<endl;
	/*BSTreeNode<int, int>*ret1 = B1.Find(19);
	cout << ret1->_key << ":" << ret1->_value;*/
	B1.Remove(7);
	B1.InOrder();
	B1.Remove(0);
	B1.InOrder();
	B1.Remove(8);
	B1.InOrder();
	B1.Remove(9);
	B1.InOrder();

}
void test1()
{
	BSTree<int, int>B1;
	int a[] = { 8, 2, 4, 1, 6, 7, 5, 3, 0, 9 };
	int a1[] = { 3, 1 ,0};
	for (int i = 0; i < sizeof(a) / sizeof(a[0]); i++)
	{
		B1.Insert_R(i, a[i]);
	}
	B1.InOrder();
	BSTreeNode<int, int>*ret1 = B1.Find_R(4);
	BSTreeNode<int, int>*ret2 = B1.Find_R(0);
	BSTreeNode<int, int>*ret3 = B1.Find_R(9);
	cout << ret1->_key << ":" << ret1->_value;
	cout << ret2->_key << ":" << ret2->_value;
	cout << ret3->_key << ":" << ret3->_value<<endl;
	B1.Remove_R(0);
	B1.InOrder();
	B1.Remove_R(6);
	B1.InOrder();
	B1.Remove_R(9);
	B1.Remove_R(7);
	B1.InOrder();
	B1.Remove_R(4);
	B1.Remove_R(3);
	B1.Remove_R(8);
	B1.InOrder();

}
int main()
{
  test();
	test1();
	return 0;
}
